{"version":3,"file":"alwan.min.js","sources":["../../src/constants/defaults.ts","../../src/assets/svg.ts","../../src/utils/math.ts","../../src/constants/globals.ts","../../src/colors/stringify.ts","../../src/constants/classnames.ts","../../src/core/events/binder.ts","../../src/utils/is.ts","../../src/utils/object.ts","../../src/utils/dom.ts","../../src/colors/parser.ts","../../src/components/Swatches.ts","../../src/components/Utility.ts","../../src/popover/constants.ts","../../src/popover/utils.ts","../../src/popover/index.ts","../../src/core/app.ts","../../src/components/Reference.ts","../../src/components/Palette.ts","../../src/components/Sliders.ts","../../src/components/Inputs.ts","../../src/colors/conversions.ts","../../src/core/colorState.ts","../../src/alwan.ts","../../src/core/events/emitter.ts"],"sourcesContent":["import type { alwanConfig } from \"../types\";\n\nexport const alwanDefaults: alwanConfig = {\n\tid: \"\",\n\tclassname: \"\",\n\ttheme: \"light\",\n\tparent: \"\",\n\ttoggle: true,\n\tpopover: true,\n\tposition: \"bottom-start\",\n\tmargin: 4,\n\tpreset: true,\n\tcolor: \"#000\",\n\tdefault: \"#000\",\n\ttarget: \"\",\n\tdisabled: false,\n\tformat: \"rgb\",\n\tsingleInput: false,\n\tinputs: true,\n\topacity: true,\n\tpreview: true,\n\tcopy: true,\n\tswatches: [],\n\ttoggleSwatches: false,\n\tcloseOnScroll: false,\n\ti18n: {\n\t\tpalette: \"Color picker\",\n\t\tbuttons: {\n\t\t\tcopy: \"Copy color to clipboard\",\n\t\t\tchangeFormat: \"Change color format\",\n\t\t\tswatch: \"Color swatch\",\n\t\t\ttoggleSwatches: \"Toggle Swatches\",\n\t\t},\n\t\tsliders: {\n\t\t\thue: \"Change hue\",\n\t\t\talpha: \"Change opacity\",\n\t\t},\n\t},\n};\n","export const clipboardSVG = `<svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" aria-role=\"none\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg>`;\nexport const checkSVG = `<svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" aria-role=\"none\"><path d=\"M9,20.42L2.79,14.21L5.62,11.38L9,14.77L18.88,4.88L21.71,7.71L9,20.42Z\"></path></svg>`;\nexport const switchInputsSVG = `<svg width=\"15\" height=\"15\" viewBox=\"0 0 20 20\" aria-role=\"none\"><path d=\"M10 1L5 8h10l-5-7zm0 18l5-7H5l5 7z\"></path></svg>`;\nexport const caretSVG = `<svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" aria-role=\"none\"><path d=\"M6.984 14.016l5.016-5.016 5.016 5.016h-10.031z\"></path></svg>`;","export const int = parseInt;\nexport const { min, max, abs, round, PI } = Math;\n\nexport const clamp = (value: number, end = 100, start = 0) =>\n\tvalue > end ? end : value < start ? start : value;\n\nexport const normalizeAngle = (angle: number) => {\n\tangle %= 360;\n\treturn round(angle < 0 ? angle + 360 : angle);\n};\n","import type { colorFormat } from \"../types\";\nimport { PI } from \"../utils/math\";\n\nexport const ROOT = document;\nexport const DOC_ELEMENT = ROOT.documentElement;\n\nexport const DEFAULT_COLOR = \"#000\";\n\nexport const BUTTON = \"button\";\n\nexport const OPEN = \"open\";\nexport const CLOSE = \"close\";\nexport const COLOR = \"color\";\nexport const CLICK = \"click\";\nexport const POINTER_DOWN = \"pointerdown\";\nexport const POINTER_MOVE = \"pointermove\";\nexport const POINTER_UP = \"pointerup\";\nexport const SCROLL = \"scroll\";\nexport const RESIZE = \"resize\";\nexport const KEY_DOWN = \"keydown\";\nexport const INPUT = \"input\";\nexport const CHANGE = \"change\";\nexport const BLUR = \"blur\";\nexport const FOCUS_IN = \"focusin\";\nexport const MOUSE_OUT = \"mouseout\";\nexport const WHEEL = \"wheel\";\n\nexport const HEX_FORMAT: colorFormat = \"hex\";\nexport const RGB_FORMAT: colorFormat = \"rgb\";\nexport const HSL_FORMAT: colorFormat = \"hsl\";\n\nexport const TAB = \"Tab\";\nexport const ESCAPE = \"Escape\";\nexport const ENTER = \"Enter\";\n\nexport const COLOR_FORMATS: colorFormat[] = [\n\tHEX_FORMAT,\n\tRGB_FORMAT,\n\tHSL_FORMAT,\n];\n\nexport const ARIA_LABEL = \"aria-label\";\n\n// Arrow keys move steps.\nexport const ARROW_KEYS: Record<string, [x: number, y: number]> = {\n\tArrowUp: [0, -1],\n\tArrowDown: [0, 1],\n\tArrowRight: [1, 0],\n\tArrowLeft: [-1, 0],\n};\n\nexport const ANGLE_COEFFICIENT_MAP: { [angle: string]: number } = {\n\tdeg: 1,\n\tturn: 360,\n\trad: 180 / PI,\n\tgrad: 0.9,\n};\n\nexport const HSL_REGEX =\n\t/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(\\w*)?\\s*[\\s,]\\s*([+-]?\\d*\\.?\\d+)%?\\s*,?\\s*([+-]?\\d*\\.?\\d+)%?(?:\\s*[\\/,]\\s*([+-]?\\d*\\.?\\d+)(%)?)?\\s*\\)?$/;\n","import { RGB_FORMAT } from \"../constants/globals\";\nimport type { HSLA, RGBA, colorDetails, colorFormat } from \"../types\";\n\nexport const stringify = (\n\tcolor: colorDetails | HSLA | RGBA,\n\tformat: colorFormat = RGB_FORMAT,\n) => {\n\tlet a = color.a;\n\tlet opacity = \"\";\n\tlet str = format;\n\n\tif (a < 1) {\n\t\topacity += \", \" + a;\n\t\tstr += \"a\";\n\t}\n\n\tif (format === RGB_FORMAT) {\n\t\treturn (\n\t\t\tstr +\n\t\t\t`(${(<RGBA>color).r}, ${(<RGBA>color).g}, ${(<RGBA>color).b + opacity})`\n\t\t);\n\t}\n\n\treturn (\n\t\tstr +\n\t\t`(${(<HSLA>color).h}, ${(<HSLA>color).s}%, ${(<HSLA>color).l}%${opacity})`\n\t);\n};\n","export const ALWAN_CLASSNAME = \"alwan\";\nexport const CONTAINER_CLASSNAME = `${ALWAN_CLASSNAME}__container`;\nexport const PALETTE_CLASSNAME = `${ALWAN_CLASSNAME}__palette`;\nexport const MARKER_CLASSNAME = `${ALWAN_CLASSNAME}__marker`;\nexport const PREVIEW_CLASSNAME = `${ALWAN_CLASSNAME}__preview`;\nexport const BUTTON_CLASSNAME = `${ALWAN_CLASSNAME}__button`;\nexport const COPY_BUTTON_CLASSNAME = `${ALWAN_CLASSNAME}__copy-button`;\nexport const SLIDER_CLASSNAME = `${ALWAN_CLASSNAME}__slider`;\nexport const HUE_SLIDER_CLASSNAME = `${ALWAN_CLASSNAME}__hue`;\nexport const ALPHA_SLIDER_CLASSNAME = `${ALWAN_CLASSNAME}__alpha`;\nexport const INPUT_CLASSNAME = `${ALWAN_CLASSNAME}__input`;\nexport const INPUTS_CLASSNAME = `${ALWAN_CLASSNAME}__inputs`;\nexport const SWATCH_CLASSNAME = `${ALWAN_CLASSNAME}__swatch`;\nexport const SWATCHES_CLASSNAME = `${ALWAN_CLASSNAME}__swatches`;\nexport const REFERENCE_CLASSNAME = `${ALWAN_CLASSNAME}__reference`;\nexport const BACKDROP_CLASSNAME = `${ALWAN_CLASSNAME}__backdrop`;\nexport const COLLAPSE_BUTTON_CLASSNAME = `${ALWAN_CLASSNAME}__toggle-button`;\n\nexport const OPEN_CLASSNAME = `${ALWAN_CLASSNAME}--open`;\nexport const COLLAPSE_CLASSNAME = `${ALWAN_CLASSNAME}--collapse`;\n","import type { EventListenerBinder } from \"../../types\";\n\nexport const addEvent: EventListenerBinder = (\n\ttarget,\n\ttype,\n\tlistener,\n\toptions,\n) => target.addEventListener(type, listener, options);\n\nexport const removeEvent: EventListenerBinder = (target, type, listener) =>\n\ttarget.removeEventListener(type, listener);\n","export const isString = (value: unknown): value is string =>\n\ttypeof value === \"string\";\n\nexport const isset = <T>(value: T): value is NonNullable<T> => value != null;\n\nexport const isElement = (value: unknown): value is Element =>\n\tvalue instanceof Element;\n\nexport const isNumber = (value: unknown) =>\n\tNumber.isFinite(isString(value) && value.trim() !== \"\" ? +value : value);\n\nexport const isFunction = (value: unknown): value is Function =>\n\ttypeof value === \"function\";\n\nexport const isHex = (value: string) => /^[\\da-f]+$/i.test(value);\n","import { isElement, isset } from \"./is\";\n\nexport const { keys, assign: merge, setPrototypeOf, prototype } = Object;\nexport const { from: toArray, isArray } = Array;\n\nexport const isPlainObject = (obj: unknown) =>\n\tisset(obj) && typeof obj === \"object\" && !isArray(obj) && !isElement(obj);\n\nexport const ObjectForEach = <T extends {}>(\n\tobject: T,\n\tcallbackFn: (key: keyof T, value: T[keyof T]) => void,\n) =>\n\t(<Array<keyof T>>keys(object)).forEach((key) =>\n\t\tcallbackFn(key, object[key]),\n\t);\n\nexport const deepMerge = <T extends {}, U extends {}>(\n\ttarget: T,\n\tsource: U,\n): T & U => {\n\tif (!isPlainObject(target)) {\n\t\ttarget = <T>{};\n\t}\n\tObjectForEach(source, (key, value) => {\n\t\tif (isset(value)) {\n\t\t\tmerge(target, {\n\t\t\t\t[key]: isPlainObject(value)\n\t\t\t\t\t? deepMerge(\n\t\t\t\t\t\t\ttarget[key as unknown as keyof T & U] || {},\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t)\n\t\t\t\t\t: value,\n\t\t\t});\n\t\t}\n\t});\n\treturn <T & U>target;\n};\n","import { BUTTON_CLASSNAME, SLIDER_CLASSNAME } from \"../constants/classnames\";\nimport {\n\tARIA_LABEL,\n\tBUTTON,\n\tDOC_ELEMENT,\n\tINPUT,\n\tROOT,\n} from \"../constants/globals\";\nimport type { Attrs, DOMRectArray } from \"../types\";\nimport { isElement, isNumber, isString } from \"./is\";\nimport { ObjectForEach, toArray } from \"./object\";\n\nexport const getBody = () => ROOT.body;\n\nexport const getElements = (\n\treference: string | Element,\n\tcontext: Element = DOC_ELEMENT,\n) => {\n\tif (isString(reference) && reference.trim()) {\n\t\treturn toArray(context.querySelectorAll(reference));\n\t}\n\t// Reference must be an element in the page.\n\tif (isElement(reference)) {\n\t\treturn [reference];\n\t}\n\n\treturn [];\n};\n\nexport const getInteractiveElements = (context: HTMLElement) =>\n\tgetElements(`${INPUT},${BUTTON},[tabindex]`, context);\n\nexport const appendChildren = (\n\telement: Element,\n\t...children: Array<Element | null>\n) => element.append(...(children.filter((child) => child) as Array<Element>));\n\nexport const setInnerHTML = (element: Element, html: string) => {\n\telement.innerHTML = html;\n};\n\nexport const setAttribute = (\n\tel: Element | null,\n\tname: string,\n\tvalue: string | number,\n) => {\n\tif (el && (isNumber(value) || value)) {\n\t\tel.setAttribute(name, value + \"\");\n\t}\n};\n\nexport const joinClassnames = (...classnames: string[]) =>\n\tclassnames.join(\" \").trim();\n\nexport const createElement = <T extends keyof HTMLElementTagNameMap>(\n\ttagName: T,\n\tclassName?: string,\n\tchildren: Array<Element | null> = [],\n\tcontent?: string,\n\tattributes?: Attrs,\n) => {\n\tconst element = ROOT.createElement(tagName);\n\n\tif (className) {\n\t\telement.className = className;\n\t}\n\n\tif (content) {\n\t\tsetInnerHTML(element, content);\n\t}\n\n\tObjectForEach(attributes || {}, (name, value) =>\n\t\tsetAttribute(element, name, value),\n\t);\n\n\tappendChildren(element, ...children);\n\n\treturn element;\n};\n\nexport const createDivElement = (\n\tclassname: string,\n\t...children: Array<Element | null>\n) => createElement(\"div\", classname, children);\n\nexport const removeElement = (element: Element) => element.remove();\n\nexport const replaceElement = (element: Element, replacement: Element) => {\n\telement.replaceWith(replacement);\n\treturn replacement;\n};\n\nexport const createButton = (\n\tlabel: string = \"\",\n\tclassName: string = \"\",\n\tcontent?: string,\n\ttitle: string = label,\n) => {\n\treturn createElement(\n\t\tBUTTON,\n\t\tjoinClassnames(BUTTON_CLASSNAME, className),\n\t\t[],\n\t\tcontent,\n\t\t{\n\t\t\ttype: BUTTON,\n\t\t\t[ARIA_LABEL]: label,\n\t\t\ttitle,\n\t\t},\n\t);\n};\n\nexport const createSlider = (classname: string, max: number, step = 1) =>\n\tcreateElement(INPUT, joinClassnames(SLIDER_CLASSNAME, classname), [], \"\", {\n\t\tmax,\n\t\tstep,\n\t\ttype: \"range\",\n\t});\n\nexport const setCustomProperty = (\n\telement: HTMLElement | SVGAElement | null,\n\tproperty: string,\n\tvalue: string | number,\n) => {\n\tif (element) {\n\t\telement.style.setProperty(\"--\" + property, value + \"\");\n\t}\n\treturn element;\n};\n\nexport const toggleClassName = (\n\telement: Element,\n\ttoken: string,\n\tforced?: boolean,\n) => element.classList.toggle(token, forced);\n\nexport const translate = (element: HTMLElement, x: number, y: number) => {\n\telement.style.transform = `translate(${x}px,${y}px)`;\n};\n\nexport const getParentElement = (element: Element | Document) =>\n\t(element && element.parentElement) || getBody();\n\nexport const getBoundingRectArray = (\n\telement: Document | Element,\n\taddClientArea?: boolean,\n): DOMRectArray => {\n\tlet x, y, width, height, right, bottom;\n\n\tif (!isElement(element)) {\n\t\tx = y = 0;\n\t\twidth = right = DOC_ELEMENT.clientWidth;\n\t\theight = bottom = DOC_ELEMENT.clientHeight;\n\t} else {\n\t\t({ x, y, width, height, right, bottom } =\n\t\t\telement.getBoundingClientRect());\n\t\tif (addClientArea) {\n\t\t\tx += element.clientTop;\n\t\t\ty += element.clientLeft;\n\t\t}\n\t}\n\n\treturn [x, y, width, height, right, bottom];\n};\n\nexport const getShadowRoot = (node: Node | null): ShadowRoot | null => {\n\tif (!node || node === getBody()) {\n\t\treturn null;\n\t}\n\tif (node instanceof ShadowRoot) {\n\t\treturn node;\n\t}\n\treturn getShadowRoot(node.parentNode);\n};\n","import {\n\tANGLE_COEFFICIENT_MAP,\n\tDEFAULT_COLOR,\n\tHSL_FORMAT,\n\tHSL_REGEX,\n\tRGB_FORMAT,\n} from \"../constants/globals\";\nimport type { Color, HSLA, RGBA, colorFormat } from \"../types\";\nimport { createElement } from \"../utils/dom\";\nimport { isHex, isNumber, isString } from \"../utils/is\";\nimport { clamp, int, normalizeAngle, round } from \"../utils/math\";\nimport { isPlainObject } from \"../utils/object\";\nimport { stringify } from \"./stringify\";\n\nconst ctx = createElement(\"canvas\").getContext(\"2d\")!;\n\n/**\n * Parses any value into an RGB or HSL objects.\n * Invalid values default to DEFAULT_COLOR in globals.\n */\nexport const parseColor = (\n\tcolor: Color,\n\tasString?: boolean,\n): string | [RGBA | HSLA, colorFormat] => {\n\tlet format: colorFormat | undefined;\n\tlet parsedColor: HSLA | RGBA;\n\tlet str = \"\";\n\n\tif (isString(color)) {\n\t\tstr = color.trim();\n\t} else {\n\t\tif (isPlainObject(color)) {\n\t\t\tformat = [RGB_FORMAT, HSL_FORMAT].find((format) =>\n\t\t\t\tformat\n\t\t\t\t\t.split(\"\")\n\t\t\t\t\t.every((key) => isNumber(color[key as keyof Color])),\n\t\t\t);\n\t\t\tif (format) {\n\t\t\t\tstr = stringify(color as RGBA | HSLA, format);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst [isHSL, h, angle, s, l, a = \"1\", percentage] =\n\t\tHSL_REGEX.exec(str) || [];\n\n\tif (isHSL) {\n\t\t// Normalize values.\n\t\tparsedColor = {\n\t\t\th: normalizeAngle(\n\t\t\t\t+h *\n\t\t\t\t\t(ANGLE_COEFFICIENT_MAP[angle]\n\t\t\t\t\t\t? ANGLE_COEFFICIENT_MAP[angle]\n\t\t\t\t\t\t: 1),\n\t\t\t),\n\t\t\ts: clamp(+s),\n\t\t\tl: clamp(+l),\n\t\t\ta: clamp(+a / (percentage ? 100 : 1), 1),\n\t\t};\n\t\tformat = HSL_FORMAT;\n\t} else {\n\t\tformat = RGB_FORMAT;\n\n\t\t// # is optional.\n\t\tif (isHex(str)) {\n\t\t\tstr = \"#\" + str;\n\t\t}\n\n\t\tctx.fillStyle = DEFAULT_COLOR;\n\t\tctx.fillStyle = str;\n\t\t// color is rgb or hex string.\n\t\tstr = ctx.fillStyle;\n\n\t\tif (str[0] === \"#\") {\n\t\t\tparsedColor = {\n\t\t\t\tr: int(str.slice(1, 3), 16),\n\t\t\t\tg: int(str.slice(3, 5), 16),\n\t\t\t\tb: int(str.slice(5, 7), 16),\n\t\t\t\ta: 1,\n\t\t\t};\n\t\t} else {\n\t\t\tconst [r, g, b, a] = (<RegExpExecArray>/\\((.+)\\)/.exec(str))[1]\n\t\t\t\t.split(\",\")\n\t\t\t\t.map((value) => +value);\n\t\t\tparsedColor = { r, g, b, a };\n\t\t}\n\t}\n\t// Round the transparency component to two numbers behind\n\tparsedColor.a = round(parsedColor.a * 100) / 100;\n\n\treturn asString ? stringify(parsedColor, format) : [parsedColor, format];\n};\n","import type Alwan from \"..\";\nimport { caretSVG } from \"../assets/svg\";\nimport { parseColor } from \"../colors/parser\";\nimport {\n\tCOLLAPSE_BUTTON_CLASSNAME,\n\tCOLLAPSE_CLASSNAME,\n\tSWATCHES_CLASSNAME,\n\tSWATCH_CLASSNAME,\n} from \"../constants/classnames\";\nimport { CLICK, COLOR } from \"../constants/globals\";\nimport { addEvent } from \"../core/events/binder\";\nimport type { ISwatches } from \"../types\";\nimport {\n\tcreateButton,\n\tcreateDivElement,\n\tjoinClassnames,\n\tsetCustomProperty,\n\ttoggleClassName,\n} from \"../utils/dom\";\nimport { isString } from \"../utils/is\";\nimport { isArray } from \"../utils/object\";\n\nexport const Swatches = (alwan: Alwan): ISwatches => {\n\tlet container: HTMLDivElement | null;\n\tlet swatchesContainer: HTMLDivElement | null;\n\tlet collapseButton: HTMLButtonElement | null;\n\tlet isCollapsed = false;\n\n\treturn {\n\t\t_init({ swatches, toggleSwatches, i18n: { buttons } }) {\n\t\t\tif (!isArray(swatches)) {\n\t\t\t\treturn container;\n\t\t\t}\n\n\t\t\tcontainer = swatchesContainer = collapseButton = null;\n\n\t\t\tif (!swatches.length) {\n\t\t\t\treturn container;\n\t\t\t}\n\n\t\t\tswatchesContainer = container = createDivElement(\n\t\t\t\tjoinClassnames(\n\t\t\t\t\tSWATCHES_CLASSNAME,\n\t\t\t\t\ttoggleSwatches && isCollapsed ? COLLAPSE_CLASSNAME : \"\",\n\t\t\t\t),\n\t\t\t\t...swatches.map((color) =>\n\t\t\t\t\t// Sets custom property on the created button and returns it (the button).\n\t\t\t\t\tsetCustomProperty(\n\t\t\t\t\t\tcreateButton(\n\t\t\t\t\t\t\tbuttons.swatch,\n\t\t\t\t\t\t\tSWATCH_CLASSNAME,\n\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\tisString(color)\n\t\t\t\t\t\t\t\t? color\n\t\t\t\t\t\t\t\t: <string>parseColor(color, true),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tCOLOR,\n\t\t\t\t\t\t<string>parseColor(color, true),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (toggleSwatches) {\n\t\t\t\tcollapseButton = createButton(\n\t\t\t\t\tbuttons.toggleSwatches,\n\t\t\t\t\tCOLLAPSE_BUTTON_CLASSNAME,\n\t\t\t\t\tcaretSVG,\n\t\t\t\t);\n\t\t\t\t// Handles toggle swatches button click.\n\t\t\t\taddEvent(collapseButton, CLICK, () => {\n\t\t\t\t\tisCollapsed = !isCollapsed;\n\t\t\t\t\ttoggleClassName(\n\t\t\t\t\t\t<Element>swatchesContainer,\n\t\t\t\t\t\tCOLLAPSE_CLASSNAME,\n\t\t\t\t\t\tisCollapsed,\n\t\t\t\t\t);\n\t\t\t\t\talwan._app._reposition();\n\t\t\t\t});\n\n\t\t\t\tcontainer = createDivElement(\n\t\t\t\t\t\"\",\n\t\t\t\t\tswatchesContainer,\n\t\t\t\t\tcollapseButton,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Handles clicks in the swatches container.\n\t\t\taddEvent(swatchesContainer, CLICK, ({ target }: Event) => {\n\t\t\t\tif (target !== swatchesContainer) {\n\t\t\t\t\talwan._color._setColor(\n\t\t\t\t\t\t(<HTMLButtonElement>target).style.getPropertyValue(\n\t\t\t\t\t\t\t\"--\" + COLOR,\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn container;\n\t\t},\n\t};\n};\n","import type Alwan from \"..\";\nimport { checkSVG, clipboardSVG } from \"../assets/svg\";\nimport {\n\tCOPY_BUTTON_CLASSNAME,\n\tPREVIEW_CLASSNAME,\n} from \"../constants/classnames\";\nimport {\n\tBLUR,\n\tCLICK,\n\tDOC_ELEMENT,\n\tINPUT,\n\tMOUSE_OUT,\n\tROOT,\n} from \"../constants/globals\";\nimport { addEvent } from \"../core/events/binder\";\nimport type { IUtility } from \"../types\";\nimport {\n\tappendChildren,\n\tcreateButton,\n\tcreateDivElement,\n\tcreateElement,\n\tremoveElement,\n\tsetInnerHTML,\n} from \"../utils/dom\";\n\n/**\n * Color preview and copy Button.\n */\nexport const Utility = (alwan: Alwan): IUtility => {\n\tlet previewElement: HTMLDivElement | null;\n\tlet copyButton: HTMLButtonElement | null;\n\tlet isCopied = false;\n\n\tconst setButtonIcon = (state: boolean) => {\n\t\tisCopied = state;\n\t\tsetInnerHTML(copyButton!, state ? checkSVG : clipboardSVG);\n\t};\n\n\tconst fallback = (color: string) => {\n\t\tconst input = createElement(INPUT);\n\t\tappendChildren(DOC_ELEMENT, input);\n\t\tinput.value = color;\n\t\tinput.select();\n\t\tROOT.execCommand(\"copy\");\n\t\tremoveElement(input);\n\t\tcopyButton!.focus();\n\t\t// change icon.\n\t\tsetButtonIcon(true);\n\t};\n\n\tconst copyColor = () => {\n\t\tif (!isCopied) {\n\t\t\tconst clipboard = navigator.clipboard;\n\t\t\tconst color = alwan._color._getColorString();\n\n\t\t\tif (clipboard) {\n\t\t\t\tclipboard\n\t\t\t\t\t.writeText(color)\n\t\t\t\t\t.then(() => setButtonIcon(true))\n\t\t\t\t\t.catch(() => fallback(color));\n\t\t\t} else {\n\t\t\t\tfallback(color);\n\t\t\t}\n\t\t}\n\t};\n\n\treturn {\n\t\t_init({ preview, copy, i18n }) {\n\t\t\tpreviewElement = copyButton = null;\n\n\t\t\tif (copy) {\n\t\t\t\tcopyButton = createButton(\n\t\t\t\t\ti18n.buttons.copy,\n\t\t\t\t\tCOPY_BUTTON_CLASSNAME,\n\t\t\t\t\tclipboardSVG,\n\t\t\t\t);\n\n\t\t\t\taddEvent(copyButton, CLICK, copyColor);\n\t\t\t\t// Reset clipboard icon.\n\t\t\t\taddEvent(\n\t\t\t\t\tcopyButton,\n\t\t\t\t\tBLUR,\n\t\t\t\t\t() => isCopied && setButtonIcon(false),\n\t\t\t\t);\n\t\t\t\taddEvent(copyButton, MOUSE_OUT, () => copyButton!.blur());\n\t\t\t}\n\n\t\t\tif (preview) {\n\t\t\t\tpreviewElement = createDivElement(\n\t\t\t\t\tPREVIEW_CLASSNAME,\n\t\t\t\t\tcopyButton,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn previewElement || copyButton;\n\t\t},\n\t};\n};\n","import { alignment, side } from \"../types\";\n\n// Indexes in the DOMRectArray.\nexport const LEFT = 0; // Also the x coordinate.\nexport const TOP = 1; // Also the y coordinate.\nexport const WIDTH = 2;\nexport const HEIGHT = 3;\nexport const RIGHT = 4;\nexport const BOTTOM = 5;\n\nexport const START = 0;\nexport const CENTER = 1;\nexport const END = 2;\n// Margin between the popover and the window edges.\nexport const GAP = 3;\n\n// Sides to fallback to for each side.\nexport const fallbackSides: Record<side, number[]> = {\n\ttop: [TOP, BOTTOM, RIGHT, LEFT],\n\tbottom: [BOTTOM, TOP, RIGHT, LEFT],\n\tright: [RIGHT, LEFT, TOP, BOTTOM],\n\tleft: [LEFT, RIGHT, TOP, BOTTOM],\n};\n\n// Alignments to fallback to for each alignment.\nexport const fallbackAlignments: Record<alignment, number[]> = {\n\tstart: [START, CENTER, END],\n\tcenter: [CENTER, START, END],\n\tend: [END, CENTER, START],\n};\n","import { DOC_ELEMENT, ROOT } from \"../constants/globals\";\nimport { getBody, getBoundingRectArray, getParentElement } from \"../utils/dom\";\n\nexport const isInViewport = (\n\ttarget: Element,\n\toverflowAncestors: Array<Element | Document>,\n) => {\n\treturn overflowAncestors.every((ancestor) => {\n\t\tconst [x, y, , , right, bottom] = getBoundingRectArray(target);\n\t\tconst [ancestorX, ancestorY, , , ancestorRight, ancestorBottom] =\n\t\t\tgetBoundingRectArray(ancestor);\n\n\t\treturn (\n\t\t\ty < ancestorBottom &&\n\t\t\tbottom > ancestorY &&\n\t\t\tx < ancestorRight &&\n\t\t\tright > ancestorX\n\t\t);\n\t});\n};\n\nconst isContainingBlock = (element: Element) => {\n\tconst isWebkit =\n\t\t!(typeof CSS === \"undefined\" || !CSS.supports) &&\n\t\tCSS.supports(\"-webkit-backdrop-filter\", \"none\");\n\tconst {\n\t\ttransform,\n\t\tperspective,\n\t\tfilter,\n\t\tcontainerType,\n\t\tbackdropFilter,\n\t\twillChange = \"\",\n\t\tcontain = \"\",\n\t} = getComputedStyle(element);\n\n\treturn (\n\t\ttransform !== \"none\" ||\n\t\tperspective !== \"none\" ||\n\t\tcontainerType !== \"normal\" ||\n\t\t(!isWebkit && backdropFilter !== \"none\") ||\n\t\t(!isWebkit && filter !== \"none\") ||\n\t\t/transform|perspective|filter/.test(willChange) ||\n\t\t/paint|layout|strict|content/.test(contain)\n\t);\n};\n\nexport const getOverflowAncestors = (\n\telement: Element,\n\tancestors: Array<Document | Element> = [ROOT],\n): typeof ancestors => {\n\telement = getParentElement(element);\n\n\tif (element === getBody()) {\n\t\treturn ancestors;\n\t}\n\n\tconst { display, overflow } = getComputedStyle(element);\n\n\tif (\n\t\t/auto|scroll|overflow|clip|hidden/.test(overflow) &&\n\t\t![\"inline\", \"contents\"].includes(display)\n\t) {\n\t\tancestors.push(element);\n\t}\n\n\treturn getOverflowAncestors(element, ancestors);\n};\n\nexport const getOffsetParent = (element: Element): Element | Document => {\n\telement = getParentElement(element);\n\n\tif (isContainingBlock(element)) {\n\t\treturn element;\n\t}\n\n\tif (element === DOC_ELEMENT || isTopLayer(element)) {\n\t\treturn ROOT;\n\t}\n\n\treturn getOffsetParent(element);\n};\n\nconst topLayerSelectors = [\":popover-open\", \":modal\"] as const;\nconst isTopLayer = (element: Element) =>\n\ttopLayerSelectors.some((selector) => {\n\t\ttry {\n\t\t\treturn element.matches(selector);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t});\n","import {\n\tESCAPE,\n\tKEY_DOWN,\n\tPOINTER_DOWN,\n\tRESIZE,\n\tROOT,\n\tSCROLL,\n\tTAB,\n} from \"../constants/globals\";\nimport { addEvent, removeEvent } from \"../core/events/binder\";\nimport type {\n\tEventListenerBinder,\n\tIPopover,\n\tLabeledElement,\n\talignment,\n\talwanApp,\n\talwanConfig,\n\tside,\n} from \"../types\";\nimport {\n\tgetBoundingRectArray,\n\tgetInteractiveElements,\n\tgetShadowRoot,\n\ttranslate,\n} from \"../utils/dom\";\nimport { isNumber, isString, isset } from \"../utils/is\";\nimport { abs, round } from \"../utils/math\";\nimport { toArray } from \"../utils/object\";\nimport {\n\tBOTTOM,\n\tCENTER,\n\tEND,\n\tGAP,\n\tHEIGHT,\n\tSTART,\n\tfallbackAlignments,\n\tfallbackSides,\n} from \"./constants\";\nimport { getOffsetParent, getOverflowAncestors, isInViewport } from \"./utils\";\n\nexport const createPopover = (\n\ttarget: Element,\n\tpopoverElement: HTMLElement,\n\talwanReferenceElement: Element,\n\t{ margin, position, toggle, closeOnScroll }: alwanConfig,\n\t{ _isOpen, _toggle }: alwanApp,\n): IPopover => {\n\tmargin = isNumber(margin) ? +margin : 0;\n\tconst [side, alignment] = <[side, alignment]>(\n\t\t(isString(position) ? position.split(\"-\") : [])\n\t);\n\tconst sidesFlipOrder = fallbackSides[side] || fallbackSides.bottom;\n\tconst alignmentsFlipOrder =\n\t\tfallbackAlignments[alignment] || fallbackAlignments.center;\n\tconst overflowAncestors = getOverflowAncestors(target);\n\tconst popoverStyleDeclaration = popoverElement.style;\n\tconst shadowRoot = getShadowRoot(alwanReferenceElement);\n\n\tconst setPosition = () => {\n\t\tpopoverStyleDeclaration.height = \"\";\n\t\tconst viewportRect = getBoundingRectArray(ROOT);\n\t\tconst targetRect = getBoundingRectArray(target);\n\t\tconst popoverRect = getBoundingRectArray(popoverElement);\n\t\tconst offsetParentRect = getBoundingRectArray(\n\t\t\tgetOffsetParent(popoverElement),\n\t\t\ttrue,\n\t\t);\n\n\t\tconst coordinates: [x: number | null, y: number | null] = [null, null];\n\n\t\tsidesFlipOrder.some((side) => {\n\t\t\t// Get the axis from the side.\n\t\t\t// 0 (horizontal) if the side is LEFT (1) or RIGHT (4).\n\t\t\t// 1 (vertical) if the side is TOP (0) or BOTTOM (5).\n\t\t\tlet axis = side % 2;\n\n\t\t\tconst viewportSide = viewportRect[side];\n\t\t\tconst targetSide = targetRect[side];\n\t\t\t// axis + 2 gives the dimension based on the axis,\n\t\t\t// x => width or y => height.\n\t\t\tconst spaceForPopover = margin + popoverRect[axis + 2];\n\n\t\t\tif (spaceForPopover > abs(viewportSide - targetSide)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tcoordinates[axis] =\n\t\t\t\ttargetSide + (side <= 1 ? -spaceForPopover : margin);\n\n\t\t\t// Reverse the axis for the alignments.\n\t\t\taxis = (axis + 1) % 2;\n\n\t\t\t// start => top or left positions.\n\t\t\t// end => bottom or right positions.\n\n\t\t\tconst endCoordinateIndex = axis + 4;\n\t\t\tconst dimensionIndex = axis + 2;\n\n\t\t\tconst popoverDimension = popoverRect[dimensionIndex];\n\n\t\t\tconst targetStart = targetRect[axis];\n\t\t\tconst targetEnd = targetRect[endCoordinateIndex];\n\n\t\t\tconst viewportEnd = viewportRect[endCoordinateIndex] - targetStart;\n\n\t\t\tconst offset = (popoverDimension + targetRect[dimensionIndex]) / 2;\n\n\t\t\talignmentsFlipOrder.some((alignment) => {\n\t\t\t\tif (alignment == START && popoverDimension <= viewportEnd) {\n\t\t\t\t\tcoordinates[axis] = targetStart;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\talignment == CENTER &&\n\t\t\t\t\toffset <= targetEnd &&\n\t\t\t\t\toffset <= viewportEnd\n\t\t\t\t) {\n\t\t\t\t\tcoordinates[axis] = targetEnd - offset;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (alignment == END && popoverDimension <= targetEnd) {\n\t\t\t\t\tcoordinates[axis] = targetEnd - popoverDimension;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\n\t\t\treturn true;\n\t\t});\n\n\t\ttranslate(\n\t\t\tpopoverElement,\n\t\t\t...(<[x: number, y: number]>coordinates.map((value, axis) => {\n\t\t\t\t// Set a dynamic height if the popover height is greater than\n\t\t\t\t// the viewport height.\n\t\t\t\tif (\n\t\t\t\t\taxis &&\n\t\t\t\t\tvalue === null &&\n\t\t\t\t\tpopoverRect[HEIGHT] > viewportRect[BOTTOM]\n\t\t\t\t) {\n\t\t\t\t\tpopoverStyleDeclaration.height =\n\t\t\t\t\t\tviewportRect[BOTTOM] - GAP * 2 + \"px\";\n\t\t\t\t\tpopoverRect[HEIGHT] = viewportRect[BOTTOM] - GAP;\n\t\t\t\t}\n\n\t\t\t\treturn round(\n\t\t\t\t\t(isset(value)\n\t\t\t\t\t\t? value\n\t\t\t\t\t\t: // center the popover relative to the viewport.\n\t\t\t\t\t\t\t(viewportRect[axis + 4] - popoverRect[axis + 2]) /\n\t\t\t\t\t\t\t2) - offsetParentRect[axis],\n\t\t\t\t);\n\t\t\t})),\n\t\t);\n\t};\n\n\tconst autoUpdatePosition = ({ type }: Event) => {\n\t\tif (_isOpen() || !toggle) {\n\t\t\tif (isInViewport(target, overflowAncestors)) {\n\t\t\t\tif (_isOpen()) {\n\t\t\t\t\tsetPosition();\n\n\t\t\t\t\tif (closeOnScroll && type === SCROLL) {\n\t\t\t\t\t\t_toggle(false);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// This is reachable only if toggle is false.\n\t\t\t\t\t// open picker if the reference becomes visible.\n\t\t\t\t\t_toggle(true, true);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// close picker even if the toggle option was set to false.\n\t\t\t\t_toggle(false, true);\n\t\t\t}\n\t\t}\n\t};\n\n\t// Keyboard accessibility.\n\tconst handleKeyboard = (e: Event) => {\n\t\tif (_isOpen()) {\n\t\t\tconst { target, key, shiftKey } = e as KeyboardEvent;\n\t\t\tif (key === ESCAPE) {\n\t\t\t\t// Close the picker.\n\t\t\t\t_toggle(false);\n\t\t\t} else if (key === TAB) {\n\t\t\t\tconst focusableElements =\n\t\t\t\t\tgetInteractiveElements(popoverElement);\n\t\t\t\tconst firstFocusableElement = focusableElements[0];\n\t\t\t\tconst hasTabbedToPopover =\n\t\t\t\t\ttarget === alwanReferenceElement && !shiftKey;\n\t\t\t\tconst hasTabbedAwayFromPopover =\n\t\t\t\t\t(shiftKey && target === firstFocusableElement) ||\n\t\t\t\t\t(!shiftKey && target === focusableElements.pop());\n\n\t\t\t\tconst elementToFocusOn = hasTabbedToPopover\n\t\t\t\t\t? firstFocusableElement\n\t\t\t\t\t: hasTabbedAwayFromPopover\n\t\t\t\t\t\t? alwanReferenceElement\n\t\t\t\t\t\t: null;\n\n\t\t\t\tif (elementToFocusOn) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\t(<HTMLElement>elementToFocusOn).focus();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Clicks outside of the popover.\n\t */\n\tconst handleBackdropClick = ({ target }: Event) => {\n\t\tif (\n\t\t\t_isOpen() &&\n\t\t\t// Alwan reference element in a shadow dom and target is the shadow root.\n\t\t\t(!shadowRoot || target !== shadowRoot.host) &&\n\t\t\ttarget !== alwanReferenceElement &&\n\t\t\t!popoverElement.contains(target as Node) &&\n\t\t\t!toArray((<LabeledElement>alwanReferenceElement).labels || []).some(\n\t\t\t\t(label) => label.contains(target as Node),\n\t\t\t)\n\t\t) {\n\t\t\t_toggle(false);\n\t\t}\n\t};\n\n\t/**\n\t * Adds/Removes events.\n\t */\n\tconst togglePopoverEvents = (fn: EventListenerBinder) => {\n\t\toverflowAncestors.forEach((ancestor) =>\n\t\t\tfn(ancestor, SCROLL, autoUpdatePosition),\n\t\t);\n\t\tfn(window, RESIZE, autoUpdatePosition);\n\t\tfn(ROOT, KEY_DOWN, handleKeyboard);\n\t\tfn(ROOT, POINTER_DOWN, handleBackdropClick);\n\t\tif (shadowRoot) {\n\t\t\tfn(shadowRoot, POINTER_DOWN, handleBackdropClick);\n\t\t}\n\t};\n\n\ttogglePopoverEvents(addEvent);\n\tsetPosition();\n\n\treturn {\n\t\t_reposition: setPosition,\n\t\t_destroy() {\n\t\t\ttogglePopoverEvents(removeEvent);\n\t\t\tpopoverStyleDeclaration.transform = \"\";\n\t\t},\n\t};\n};\n","import type Alwan from \"..\";\nimport {\n\tInputs,\n\tPalette,\n\tReference,\n\tSliders,\n\tSwatches,\n\tUtility,\n} from \"../components\";\nimport {\n\tALWAN_CLASSNAME,\n\tCONTAINER_CLASSNAME,\n\tOPEN_CLASSNAME,\n} from \"../constants/classnames\";\nimport { CLOSE, OPEN } from \"../constants/globals\";\nimport { createPopover } from \"../popover\";\nimport type {\n\tHTMLElementHasDisabled,\n\tIPopover,\n\talwanApp,\n\talwanConfig,\n} from \"../types\";\nimport {\n\tappendChildren,\n\tcreateDivElement,\n\tgetBody,\n\tgetElements,\n\tgetInteractiveElements,\n\tremoveElement,\n\tsetInnerHTML,\n\ttoggleClassName,\n} from \"../utils/dom\";\nimport { isString, isset } from \"../utils/is\";\nimport { deepMerge, merge } from \"../utils/object\";\n\nexport const createApp = (alwan: Alwan, ref: string | Element): alwanApp => {\n\tconst { config, _color: colorState } = alwan;\n\n\tconst root = createDivElement(ALWAN_CLASSNAME);\n\tconst reference = Reference(alwan, getElements(ref)[0]);\n\n\tconst palette = Palette(alwan);\n\tconst sliders = Sliders(alwan);\n\tconst inputs = Inputs(alwan);\n\tconst components = [\n\t\tpalette,\n\t\t{\n\t\t\t_init: (config: alwanConfig) =>\n\t\t\t\tcreateDivElement(\n\t\t\t\t\tCONTAINER_CLASSNAME,\n\t\t\t\t\t...[Utility(alwan), sliders].map((component) =>\n\t\t\t\t\t\tcomponent._init(config),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t},\n\t\tinputs,\n\t\tSwatches(alwan),\n\t];\n\n\tlet isOpen = false;\n\tlet popoverInstance: IPopover | null = null;\n\n\tcolorState._setUIElements(root, palette, sliders, inputs);\n\n\treturn {\n\t\t_setup(options) {\n\t\t\toptions = options || {};\n\t\t\tconst self = this;\n\t\t\tconst { id, color } = options;\n\t\t\tconst { theme, parent, toggle, popover, target, disabled } =\n\t\t\t\tdeepMerge(config, options);\n\t\t\tconst refElement = <HTMLElement>reference._init(config);\n\t\t\tconst parentElement = getElements(parent)[0];\n\t\t\tconst targetElement = getElements(target)[0];\n\n\t\t\tcolorState._setRef(refElement);\n\n\t\t\tremoveElement(root);\n\t\t\tsetInnerHTML(root, \"\");\n\t\t\tappendChildren(\n\t\t\t\troot,\n\t\t\t\t...components.map((component) => component._init(config)),\n\t\t\t);\n\n\t\t\tisString(id) && (root.id = id);\n\t\t\tmerge(root.dataset, {\n\t\t\t\ttheme,\n\t\t\t\tdisplay: popover ? \"popover\" : \"block\",\n\t\t\t});\n\n\t\t\t// Hide reference element if both toggle and popover options are set to false,\n\t\t\trefElement.style.display = popover || toggle ? \"\" : \"none\";\n\n\t\t\tif (popoverInstance) {\n\t\t\t\tpopoverInstance._destroy();\n\t\t\t\tpopoverInstance = null;\n\t\t\t}\n\t\t\tif (popover) {\n\t\t\t\tappendChildren(parentElement || getBody(), root);\n\t\t\t\tpopoverInstance = createPopover(\n\t\t\t\t\ttargetElement || refElement,\n\t\t\t\t\troot,\n\t\t\t\t\trefElement,\n\t\t\t\t\tconfig,\n\t\t\t\t\tself,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// If there is a target element  or a parent element then append\n\t\t\t\t// the color picker widget in it, otherwise insert it after the reference element.\n\t\t\t\tif (targetElement || parentElement) {\n\t\t\t\t\tappendChildren(targetElement || parentElement, root);\n\t\t\t\t} else {\n\t\t\t\t\trefElement.after(root);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!toggle) {\n\t\t\t\tself._toggle(true, true);\n\t\t\t}\n\n\t\t\t// Disable/Enable color picker.\n\t\t\t[refElement, ...getInteractiveElements(root)].forEach(\n\t\t\t\t(element) =>\n\t\t\t\t\t((element as HTMLElementHasDisabled).disabled = !!disabled),\n\t\t\t);\n\t\t\tif (disabled) {\n\t\t\t\tif (popover) {\n\t\t\t\t\tself._toggle(false, true);\n\t\t\t\t} else if (!toggle) {\n\t\t\t\t\tself._toggle(true, true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isset(color)) {\n\t\t\t\tcolorState._setColor(color);\n\t\t\t}\n\n\t\t\t// Update ui.\n\t\t\tcolorState._update({}, false, true, true);\n\t\t},\n\n\t\t_toggle(state = !isOpen, forced = false) {\n\t\t\tif (\n\t\t\t\tstate !== isOpen &&\n\t\t\t\t(!config.disabled || (forced && (!state || !config.popover))) &&\n\t\t\t\t(config.toggle || forced)\n\t\t\t) {\n\t\t\t\tif (state && popoverInstance) {\n\t\t\t\t\tpopoverInstance._reposition();\n\t\t\t\t}\n\t\t\t\tisOpen = state;\n\t\t\t\ttoggleClassName(root, OPEN_CLASSNAME, state);\n\t\t\t\talwan._events._emit(isOpen ? OPEN : CLOSE);\n\t\t\t}\n\t\t},\n\n\t\t_isOpen: () => isOpen,\n\n\t\t_reposition() {\n\t\t\tif (popoverInstance) {\n\t\t\t\tpopoverInstance._reposition();\n\t\t\t}\n\t\t},\n\n\t\t_destroy() {\n\t\t\tremoveElement(root);\n\t\t\tif (popoverInstance) {\n\t\t\t\tpopoverInstance._destroy();\n\t\t\t}\n\t\t\treference._destroy();\n\t\t},\n\t};\n};\n","import type Alwan from \"..\";\nimport { BUTTON_CLASSNAME, REFERENCE_CLASSNAME } from \"../constants/classnames\";\nimport { CLICK, DOC_ELEMENT } from \"../constants/globals\";\nimport { addEvent, removeEvent } from \"../core/events/binder\";\nimport type { IReference } from \"../types\";\nimport {\n\tappendChildren,\n\tcreateButton,\n\tgetBody,\n\tjoinClassnames,\n\tremoveElement,\n\treplaceElement,\n} from \"../utils/dom\";\nimport { isString } from \"../utils/is\";\n\nexport const Reference = (\n\talwan: Alwan,\n\telement: Element | undefined,\n): IReference => {\n\tlet refElement: Element;\n\tconst body = getBody();\n\tconst userRef =\n\t\telement && element !== body && element !== DOC_ELEMENT ? element : null;\n\n\tconst handleClick = () => alwan._app._toggle();\n\n\tif (userRef) {\n\t\trefElement = userRef;\n\t} else {\n\t\trefElement = createButton();\n\t\tappendChildren(body, refElement);\n\t}\n\n\treturn {\n\t\t_init({ preset, classname }) {\n\t\t\t// userRef !== element means preset button is not set.\n\t\t\tif (userRef && preset != (userRef !== refElement)) {\n\t\t\t\tif (preset) {\n\t\t\t\t\t// Replace user reference with a preset button.\n\t\t\t\t\trefElement = replaceElement(userRef, createButton());\n\t\t\t\t\tif (userRef.id) {\n\t\t\t\t\t\trefElement.id = userRef.id;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Replace preset button with the user reference.\n\t\t\t\t\trefElement = replaceElement(refElement, userRef);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\taddEvent(refElement, CLICK, handleClick);\n\n\t\t\t// Add classes to the preset button.\n\t\t\tif (!userRef || preset) {\n\t\t\t\trefElement.className = joinClassnames(\n\t\t\t\t\tBUTTON_CLASSNAME,\n\t\t\t\t\tREFERENCE_CLASSNAME,\n\t\t\t\t\tisString(classname) ? classname : \"\",\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn refElement;\n\t\t},\n\n\t\t_destroy() {\n\t\t\tif (userRef) {\n\t\t\t\tremoveEvent(userRef, CLICK, handleClick);\n\t\t\t\tif (userRef !== refElement) {\n\t\t\t\t\treplaceElement(refElement, userRef);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tremoveElement(refElement);\n\t\t\t}\n\t\t},\n\t};\n};\n","import type Alwan from \"..\";\nimport {\n\tBACKDROP_CLASSNAME,\n\tMARKER_CLASSNAME,\n\tPALETTE_CLASSNAME,\n} from \"../constants/classnames\";\nimport {\n\tARIA_LABEL,\n\tARROW_KEYS,\n\tBLUR,\n\tDOC_ELEMENT,\n\tKEY_DOWN,\n\tPOINTER_DOWN,\n\tPOINTER_MOVE,\n\tPOINTER_UP,\n\tROOT,\n} from \"../constants/globals\";\nimport { addEvent, removeEvent } from \"../core/events/binder\";\nimport { DOMRectArray, IPalette } from \"../types\";\nimport {\n\tcreateDivElement,\n\tgetBoundingRectArray,\n\tsetAttribute,\n\ttoggleClassName,\n\ttranslate,\n} from \"../utils/dom\";\nimport { clamp, min } from \"../utils/math\";\n\n/**\n * Color picking area.\n */\nexport const Palette = ({ _color: colorState }: Alwan): IPalette => {\n\tlet markerX: number;\n\tlet markerY: number;\n\tlet paletteRect: DOMRectArray;\n\tlet isDisabled: boolean;\n\n\tconst marker = createDivElement(MARKER_CLASSNAME);\n\tconst palette = createDivElement(PALETTE_CLASSNAME, marker);\n\tconst value = { s: 0, l: 0 };\n\n\t/**\n\t * Moves marker using a pointer (mouse, touch or pen) or keyboard arrow keys.\n\t */\n\tconst moveMarkerAndUpdateColor = (\n\t\te: PointerEvent | null,\n\t\t[stepX, stepY]: [x: number, y: number] = [0, 0],\n\t) => {\n\t\tlet [x, y, width, height] = paletteRect;\n\t\tlet v: number, l: number;\n\n\t\tif (e) {\n\t\t\tmarkerX = e.clientX - x;\n\t\t\tmarkerY = e.clientY - y;\n\t\t} else {\n\t\t\tmarkerX += (stepX * width) / 100;\n\t\t\tmarkerY += (stepY * height) / 100;\n\t\t}\n\t\tmarkerX = clamp(markerX, width);\n\t\tmarkerY = clamp(markerY, height);\n\n\t\ttranslate(marker, markerX, markerY);\n\n\t\tv = 1 - markerY / height;\n\t\tl = v * (1 - markerX / (2 * width));\n\n\t\tvalue.s = l === 1 || l === 0 ? 0 : ((v - l) / min(l, 1 - l)) * 100;\n\t\tvalue.l = l * 100;\n\t\tcolorState._update(value);\n\t};\n\n\tconst dragMove = (e: Event) => {\n\t\tif ((<PointerEvent>e).buttons) {\n\t\t\tmoveMarkerAndUpdateColor(e as PointerEvent);\n\t\t} else {\n\t\t\t// Stop dragging if the pointer became not active without triggering\n\t\t\t// the pointerup event.\n\t\t\tsetDragging(false);\n\t\t}\n\t};\n\n\tconst dragEnd = () => {\n\t\tcolorState._change();\n\t\tsetDragging(false);\n\t};\n\n\t/**\n\t * Handles window loses focus while dragging the marker.\n\t */\n\tconst windowBlur = () => colorState._change();\n\n\tconst setDragging = (dragging: boolean) => {\n\t\ttoggleClassName(DOC_ELEMENT, BACKDROP_CLASSNAME, dragging);\n\t\t(dragging ? addEvent : removeEvent)(ROOT, POINTER_MOVE, dragMove);\n\t\t(dragging ? addEvent : removeEvent)(window, BLUR, windowBlur);\n\t};\n\n\taddEvent(palette, POINTER_DOWN, (e) => {\n\t\tif (!isDisabled) {\n\t\t\t// Drag start.\n\t\t\tcolorState._cache();\n\t\t\tpaletteRect = getBoundingRectArray(palette);\n\t\t\tmoveMarkerAndUpdateColor(<PointerEvent>e);\n\t\t\t// Drag move.\n\t\t\tsetDragging(true);\n\t\t\t// Drag end.\n\t\t\taddEvent(ROOT, POINTER_UP, dragEnd, { once: true });\n\t\t}\n\t});\n\n\t/**\n\t * Moves marker using keyboard arrow keys.\n\t */\n\taddEvent(palette, KEY_DOWN, (e: Event) => {\n\t\tconst steps = ARROW_KEYS[(<KeyboardEvent>e).key];\n\n\t\tif (steps) {\n\t\t\te.preventDefault();\n\t\t\tpaletteRect = getBoundingRectArray(palette);\n\t\t\tcolorState._cache();\n\t\t\tmoveMarkerAndUpdateColor(null, steps);\n\t\t\tcolorState._change();\n\t\t}\n\t});\n\n\treturn {\n\t\t_init({ i18n, disabled }) {\n\t\t\tsetAttribute(palette, ARIA_LABEL, i18n.palette);\n\t\t\tsetAttribute(palette, \"tabindex\", disabled ? \"\" : 0);\n\t\t\tisDisabled = disabled;\n\n\t\t\treturn palette;\n\t\t},\n\n\t\t_updateMarker(s, l) {\n\t\t\tl /= 100;\n\t\t\ts = l + (s / 100) * min(l, 1 - l);\n\t\t\tpaletteRect = getBoundingRectArray(palette);\n\t\t\tmarkerX = (s ? 2 * (1 - l / s) : 0) * paletteRect[2];\n\t\t\tmarkerY = (1 - s) * paletteRect[3];\n\t\t\ttranslate(marker, markerX, markerY);\n\t\t},\n\t};\n};\n","import type Alwan from \"..\";\nimport {\n\tALPHA_SLIDER_CLASSNAME,\n\tHUE_SLIDER_CLASSNAME,\n} from \"../constants/classnames\";\nimport { ARIA_LABEL, CHANGE, INPUT } from \"../constants/globals\";\nimport { addEvent } from \"../core/events/binder\";\nimport type { ISliders } from \"../types\";\nimport { createDivElement, createSlider, setAttribute } from \"../utils/dom\";\n\nexport const Sliders = ({ _color: colorState, _events }: Alwan): ISliders => {\n\tlet alphaSlider: HTMLInputElement | null;\n\tlet container;\n\tconst hueSlider = createSlider(HUE_SLIDER_CLASSNAME, 360);\n\n\t// Handles hue slider change.\n\taddEvent(hueSlider, INPUT, () =>\n\t\tcolorState._update({ h: +hueSlider.value }),\n\t);\n\n\treturn {\n\t\t_init({ opacity, i18n: { sliders } }) {\n\t\t\talphaSlider = null;\n\n\t\t\tif (opacity) {\n\t\t\t\talphaSlider = createSlider(ALPHA_SLIDER_CLASSNAME, 1, 0.01);\n\t\t\t\t// Handles alpha slider change.\n\t\t\t\taddEvent(alphaSlider, INPUT, () =>\n\t\t\t\t\tcolorState._update({ a: +alphaSlider!.value }),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tcolorState._value.a = 1;\n\t\t\t}\n\t\t\tsetAttribute(hueSlider, ARIA_LABEL, sliders.hue);\n\t\t\tsetAttribute(alphaSlider, ARIA_LABEL, sliders.alpha);\n\n\t\t\tcontainer = createDivElement(\"\", hueSlider, alphaSlider);\n\t\t\t// Handles sliders change stop.\n\t\t\taddEvent(container, CHANGE, () => _events._emit(CHANGE));\n\n\t\t\treturn container;\n\t\t},\n\n\t\t_setValues(h, a) {\n\t\t\thueSlider.value = h + \"\";\n\t\t\tif (alphaSlider) {\n\t\t\t\talphaSlider.value = a + \"\";\n\t\t\t}\n\t\t},\n\t};\n};\n","import type Alwan from \"..\";\nimport { switchInputsSVG } from \"../assets/svg\";\nimport { stringify } from \"../colors/stringify\";\nimport {\n\tCONTAINER_CLASSNAME,\n\tINPUTS_CLASSNAME,\n\tINPUT_CLASSNAME,\n} from \"../constants/classnames\";\nimport {\n\tCHANGE,\n\tCLICK,\n\tCOLOR_FORMATS,\n\tENTER,\n\tFOCUS_IN,\n\tHEX_FORMAT,\n\tINPUT,\n\tKEY_DOWN,\n} from \"../constants/globals\";\nimport { addEvent } from \"../core/events/binder\";\nimport type {\n\tHSLA,\n\tIInputs,\n\tInputFormats,\n\tRGBA,\n\tcolorDetails,\n\tcolorFormat,\n} from \"../types\";\nimport {\n\tappendChildren,\n\tcreateButton,\n\tcreateDivElement,\n\tcreateElement,\n\tsetInnerHTML,\n} from \"../utils/dom\";\nimport { max } from \"../utils/math\";\nimport { ObjectForEach } from \"../utils/object\";\n\nexport const Inputs = (alwan: Alwan): IInputs => {\n\tlet { config, _color: colorState } = alwan;\n\tlet container: HTMLDivElement | null;\n\tlet inputsWrapper: HTMLDivElement | null;\n\tlet switchButton: HTMLButtonElement | null;\n\tlet formats: colorFormat[] = [];\n\tlet currentFormatIndex: number;\n\tlet inputsMap: Partial<Record<keyof colorDetails, HTMLInputElement>>;\n\tlet isChanged = false;\n\tlet isSingle: boolean;\n\n\tconst handleChange = () => {\n\t\tlet color: Partial<Record<keyof colorDetails, number | string>> = {};\n\t\tlet format = formats[currentFormatIndex];\n\n\t\tif (!isChanged) {\n\t\t\tcolorState._cache();\n\t\t\tisChanged = true;\n\t\t}\n\n\t\tObjectForEach(inputsMap, (key, input) => (color[key] = input!.value));\n\n\t\tcolorState._setColor(\n\t\t\tisSingle\n\t\t\t\t? <string>color[format]\n\t\t\t\t: stringify(<RGBA | HSLA>color, format),\n\t\t\ttrue,\n\t\t);\n\t};\n\n\tconst buildInputs = () => {\n\t\tif (inputsWrapper) {\n\t\t\tinputsMap = {};\n\t\t\t// Remove all inputs.\n\t\t\tsetInnerHTML(inputsWrapper, \"\");\n\t\t\tisSingle =\n\t\t\t\tformats[currentFormatIndex] === HEX_FORMAT ||\n\t\t\t\tconfig.singleInput;\n\t\t\tconst format = formats[currentFormatIndex];\n\t\t\t// For multiple inputs, each character in the color format represent an input field.\n\t\t\tconst fields = isSingle\n\t\t\t\t? [format]\n\t\t\t\t: (format + (config.opacity ? \"a\" : \"\")).split(\"\");\n\t\t\tconst colorValue = colorState._value;\n\n\t\t\tappendChildren(\n\t\t\t\tinputsWrapper,\n\t\t\t\t...fields.map((field) => {\n\t\t\t\t\tinputsMap[<keyof colorDetails>field] = createElement(\n\t\t\t\t\t\tINPUT,\n\t\t\t\t\t\tINPUT_CLASSNAME,\n\t\t\t\t\t\t[],\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: \"text\",\n\t\t\t\t\t\t\tvalue: colorValue[<keyof colorDetails>field],\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t\treturn createElement(\"label\", \"\", [\n\t\t\t\t\t\tinputsMap[<keyof colorDetails>field]!,\n\t\t\t\t\t\tcreateElement(\"span\", \"\", [], field),\n\t\t\t\t\t]);\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t};\n\n\tconst changeFormat = () => {\n\t\tcurrentFormatIndex = (currentFormatIndex + 1) % formats.length;\n\t\tcolorState._setFormat(formats[currentFormatIndex]);\n\t\tbuildInputs();\n\t};\n\n\treturn {\n\t\t_init({ inputs, format, i18n }) {\n\t\t\tcontainer = inputsWrapper = switchButton = null;\n\t\t\tformats = COLOR_FORMATS;\n\n\t\t\tif (inputs !== true) {\n\t\t\t\tinputs = inputs || {};\n\t\t\t\tformats = formats.filter(\n\t\t\t\t\t(format) => (<InputFormats>inputs)[format],\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst formatsLength = formats.length;\n\t\t\tif (!formatsLength) {\n\t\t\t\tformats = COLOR_FORMATS;\n\t\t\t}\n\t\t\t// validate the format option.\n\t\t\tcurrentFormatIndex = max(formats.indexOf(format), 0);\n\t\t\tcolorState._setFormat(formats[currentFormatIndex]);\n\n\t\t\tif (formatsLength) {\n\t\t\t\tif (formatsLength > 1) {\n\t\t\t\t\tswitchButton = createButton(\n\t\t\t\t\t\ti18n.buttons.changeFormat,\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\tswitchInputsSVG,\n\t\t\t\t\t);\n\t\t\t\t\taddEvent(switchButton, CLICK, changeFormat);\n\t\t\t\t}\n\t\t\t\tinputsWrapper = createDivElement(INPUTS_CLASSNAME);\n\t\t\t\tcontainer = createDivElement(\n\t\t\t\t\tCONTAINER_CLASSNAME,\n\t\t\t\t\tinputsWrapper,\n\t\t\t\t\tswitchButton,\n\t\t\t\t);\n\n\t\t\t\taddEvent(inputsWrapper, INPUT, handleChange);\n\t\t\t\taddEvent(inputsWrapper, CHANGE, () => {\n\t\t\t\t\tcolorState._change();\n\t\t\t\t\tisChanged = false;\n\t\t\t\t});\n\t\t\t\taddEvent(inputsWrapper, FOCUS_IN, (e: Event) =>\n\t\t\t\t\t(<HTMLInputElement>e.target).select(),\n\t\t\t\t);\n\t\t\t\t// Pressing Enter causes the picker to close.\n\t\t\t\taddEvent(\n\t\t\t\t\tinputsWrapper,\n\t\t\t\t\tKEY_DOWN,\n\t\t\t\t\t(e: Event) =>\n\t\t\t\t\t\t(e as KeyboardEvent).key === ENTER &&\n\t\t\t\t\t\talwan._app._toggle(false),\n\t\t\t\t);\n\n\t\t\t\tbuildInputs();\n\t\t\t}\n\n\t\t\treturn container;\n\t\t},\n\n\t\t_setValues(color) {\n\t\t\tif (!isChanged) {\n\t\t\t\tObjectForEach(\n\t\t\t\t\tinputsMap || {},\n\t\t\t\t\t(key, input) => (input!.value = color[key] + \"\"),\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t};\n};\n","import type { HSLA, RGB, RGBA, colorDetails } from \"../types\";\nimport { abs, max, min, normalizeAngle, round } from \"../utils/math\";\n\nconst decimalToHex = (decimal: number) =>\n\t(decimal < 16 ? \"0\" : \"\") + decimal.toString(16);\n\nexport const RGBToHEX = ({ r, g, b, a }: RGBA) =>\n\t\"#\" +\n\tdecimalToHex(r) +\n\tdecimalToHex(g) +\n\tdecimalToHex(b) +\n\t(a < 1 ? decimalToHex(round(a * 255)) : \"\");\n\n/**\n * Helper function used for converting HSL to RGB.\n */\nconst fn = (k: number, s: number, l: number) => {\n\tk %= 12;\n\treturn round((l - s * min(l, 1 - l) * max(-1, min(k - 3, 9 - k, 1))) * 255);\n};\n\nexport const HSLToRGB = ({ h, s, l }: colorDetails): RGB => {\n\th /= 30;\n\ts /= 100;\n\tl /= 100;\n\treturn {\n\t\tr: fn(h, s, l),\n\t\tg: fn(h + 8, s, l),\n\t\tb: fn(h + 4, s, l),\n\t};\n};\n\nexport const RGBToHSL = ({ r, g, b, a }: RGBA): HSLA => {\n\tr /= 255;\n\tg /= 255;\n\tb /= 255;\n\n\tconst cMax = max(r, g, b);\n\tconst cMin = min(r, g, b);\n\tconst d = cMax - cMin;\n\tconst l = (cMax + cMin) / 2;\n\tconst h =\n\t\td === 0\n\t\t\t? 0\n\t\t\t: cMax === r\n\t\t\t\t? ((g - b) / d) % 6\n\t\t\t\t: cMax === g\n\t\t\t\t\t? (b - r) / d + 2\n\t\t\t\t\t: cMax === b\n\t\t\t\t\t\t? (r - g) / d + 4\n\t\t\t\t\t\t: 0;\n\n\treturn {\n\t\th: normalizeAngle(h * 60),\n\t\ts: d ? (d / (1 - abs(2 * l - 1))) * 100 : 0,\n\t\tl: l * 100,\n\t\ta,\n\t};\n};\n","import type Alwan from \"..\";\nimport { HSLToRGB, RGBToHEX, RGBToHSL } from \"../colors/conversions\";\nimport { parseColor } from \"../colors/parser\";\nimport { stringify } from \"../colors/stringify\";\nimport { CHANGE, COLOR, HSL_FORMAT, RGB_FORMAT } from \"../constants/globals\";\nimport type {\n\tHSLA,\n\tIColorState,\n\tIInputs,\n\tIPalette,\n\tISliders,\n\tRGBA,\n\tcolorDetails,\n\tcolorFormat,\n} from \"../types\";\nimport { setCustomProperty } from \"../utils/dom\";\nimport { round } from \"../utils/math\";\nimport { merge } from \"../utils/object\";\n\nexport const colorState = (alwan: Alwan): IColorState => {\n\tconst state: colorDetails = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0,\n\n\t\tr: 0,\n\t\tg: 0,\n\t\tb: 0,\n\n\t\ta: 1,\n\n\t\trgb: \"\",\n\t\thsl: \"\",\n\t\thex: \"\",\n\t};\n\tconst config = alwan.config;\n\tconst emitEvent = alwan._events._emit;\n\tlet referenceElement: HTMLElement;\n\tlet rootElement: HTMLElement;\n\tlet paletteComponent: IPalette;\n\tlet slidersComponent: ISliders;\n\tlet inputsComponent: IInputs;\n\tlet currentFormat: colorFormat;\n\tlet cashedColor: string;\n\n\treturn {\n\t\t_value: state,\n\n\t\t_getColorString: () => state[currentFormat],\n\n\t\t_setFormat(format) {\n\t\t\tcurrentFormat = config.format = format;\n\t\t},\n\n\t\t_setRef(ref) {\n\t\t\treferenceElement = ref;\n\t\t},\n\n\t\t_setUIElements(root, palette, sliders, inputs) {\n\t\t\trootElement = root;\n\t\t\tpaletteComponent = palette;\n\t\t\tslidersComponent = sliders;\n\t\t\tinputsComponent = inputs;\n\t\t},\n\n\t\t_update(\n\t\t\thsl,\n\t\t\ttriggerColorEvent = true,\n\t\t\tignoreRGB,\n\t\t\tupdatePaletteAndSliders,\n\t\t) {\n\t\t\tconst previousHex = state.hex;\n\n\t\t\tmerge(state, hsl);\n\t\t\t!ignoreRGB && merge(state, HSLToRGB(state));\n\n\t\t\tstate.s = round(state.s);\n\t\t\tstate.l = round(state.l);\n\n\t\t\tstate.rgb = stringify(state);\n\t\t\tstate.hsl = stringify(state, HSL_FORMAT);\n\t\t\tstate.hex = RGBToHEX(state);\n\n\t\t\tsetCustomProperty(referenceElement, COLOR, state.rgb);\n\t\t\tsetCustomProperty(\n\t\t\t\trootElement,\n\t\t\t\tRGB_FORMAT,\n\t\t\t\t`${state.r},${state.g},${state.b}`,\n\t\t\t);\n\t\t\tsetCustomProperty(rootElement, \"a\", state.a);\n\t\t\tsetCustomProperty(rootElement, \"h\", state.h);\n\t\t\tinputsComponent._setValues(state);\n\n\t\t\tif (updatePaletteAndSliders) {\n\t\t\t\tslidersComponent._setValues(state.h, state.a);\n\t\t\t\tpaletteComponent._updateMarker(state.s, state.l);\n\t\t\t}\n\n\t\t\tif (triggerColorEvent && previousHex !== state.hex) {\n\t\t\t\temitEvent(COLOR, state);\n\t\t\t}\n\t\t},\n\n\t\t_setColor(color, triggerColorEvent = false, triggerChangeEvent) {\n\t\t\tconst [colorObject, colorFormat] = <[RGBA | HSLA, colorFormat]>(\n\t\t\t\tparseColor(color)\n\t\t\t);\n\t\t\tconst isRGB = colorFormat === RGB_FORMAT;\n\n\t\t\tif (!config.opacity) {\n\t\t\t\tcolorObject.a = 1;\n\t\t\t}\n\n\t\t\tif (state[colorFormat] !== stringify(colorObject, colorFormat)) {\n\t\t\t\tmerge(\n\t\t\t\t\tstate,\n\t\t\t\t\tcolorObject,\n\t\t\t\t\tisRGB ? RGBToHSL(<RGBA>colorObject) : {},\n\t\t\t\t);\n\t\t\t\tthis._update({}, triggerColorEvent, isRGB, true);\n\n\t\t\t\tif (triggerChangeEvent) {\n\t\t\t\t\temitEvent(CHANGE, state);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_cache() {\n\t\t\tcashedColor = state[currentFormat];\n\t\t},\n\n\t\t/**\n\t\t * Emit change event if the color have changed compared to the cashed color.\n\t\t */\n\t\t_change() {\n\t\t\tif (cashedColor !== state[currentFormat]) {\n\t\t\t\temitEvent(CHANGE, state);\n\t\t\t}\n\t\t},\n\t};\n};\n","import { version } from \"../package.json\";\nimport \"./assets/scss/alwan.scss\";\nimport { alwanDefaults } from \"./constants/defaults\";\nimport { createApp } from \"./core/app\";\nimport { colorState } from \"./core/colorState\";\nimport { Emitter } from \"./core/events/emitter\";\nimport type {\n\tColor,\n\tEventEmitter,\n\tIColorState,\n\talwanApp,\n\talwanConfig,\n\talwanEventListener,\n\talwanEventType,\n\talwanOptions,\n\talwanValue,\n} from \"./types\";\nimport { isNumber } from \"./utils/is\";\nimport {\n\tObjectForEach,\n\tdeepMerge,\n\tprototype,\n\tsetPrototypeOf,\n} from \"./utils/object\";\n\nexport class Alwan {\n\tstatic version() {\n\t\treturn version;\n\t}\n\n\tstatic setDefaults(defaults: alwanOptions) {\n\t\tdeepMerge(alwanDefaults, defaults);\n\t}\n\n\tconfig: alwanConfig;\n\t_events: EventEmitter;\n\t_color: IColorState;\n\t_app: alwanApp;\n\tconstructor(reference: string | Element, options?: alwanOptions) {\n\t\tthis.config = deepMerge({}, alwanDefaults);\n\t\tthis._events = Emitter(this);\n\t\tthis._color = colorState(this);\n\t\tthis._app = createApp(this, reference);\n\t\tthis._app._setup(options);\n\t}\n\n\tsetOptions(options: alwanOptions) {\n\t\tthis._app._setup(options);\n\t}\n\n\tsetColor(color: Color) {\n\t\tthis._color._setColor(color);\n\t\treturn this;\n\t}\n\n\tgetColor(): alwanValue {\n\t\treturn { ...this._color._value };\n\t}\n\n\tisOpen() {\n\t\treturn this._app._isOpen();\n\t}\n\n\topen() {\n\t\tthis._app._toggle(true);\n\t}\n\n\tclose() {\n\t\tthis._app._toggle(false);\n\t}\n\n\ttoggle() {\n\t\tthis._app._toggle();\n\t}\n\n\ton(type: alwanEventType, listener: alwanEventListener) {\n\t\tthis._events._on(type, listener);\n\t}\n\n\toff(type?: alwanEventType, listener?: alwanEventListener) {\n\t\tthis._events._off(type, listener);\n\t}\n\n\taddSwatches(...swatches: Color[]) {\n\t\tthis._app._setup({ swatches: this.config.swatches.concat(swatches) });\n\t}\n\n\tremoveSwatches(...swatches: Array<number | Color>) {\n\t\tthis._app._setup({\n\t\t\tswatches: this.config.swatches.filter(\n\t\t\t\t(swatch, index) =>\n\t\t\t\t\t!swatches.some((item) =>\n\t\t\t\t\t\tisNumber(item) ? +item === index : item === swatch,\n\t\t\t\t\t),\n\t\t\t),\n\t\t});\n\t}\n\n\tenable() {\n\t\tthis._app._setup({ disabled: false });\n\t}\n\n\tdisable() {\n\t\tthis._app._setup({ disabled: true });\n\t}\n\n\treset() {\n\t\tthis._color._setColor(this.config.default);\n\t}\n\n\treposition() {\n\t\tthis._app._reposition();\n\t}\n\n\ttrigger(type: alwanEventType) {\n\t\tthis._events._emit(type);\n\t}\n\n\tdestroy() {\n\t\tthis._app._destroy();\n\t\tObjectForEach(this, (key) => delete this[key]);\n\t\tsetPrototypeOf(this, prototype);\n\t}\n}\n","import Alwan from \"../..\";\nimport { CHANGE, CLOSE, COLOR, OPEN } from \"../../constants/globals\";\nimport type { EventEmitter, alwanEventAndListenersMap } from \"../../types\";\nimport { isFunction, isset } from \"../../utils/is\";\nimport { ObjectForEach, merge } from \"../../utils/object\";\n\nexport const Emitter = (alwan: Alwan): EventEmitter => {\n\tconst listeners: alwanEventAndListenersMap = {\n\t\t[OPEN]: [],\n\t\t[CLOSE]: [],\n\t\t[CHANGE]: [],\n\t\t[COLOR]: [],\n\t};\n\n\treturn {\n\t\t_emit(type, value = alwan._color._value) {\n\t\t\t(listeners[type] || []).forEach((listener) =>\n\t\t\t\tlistener(merge({ type, source: alwan }, value)),\n\t\t\t);\n\t\t},\n\n\t\t_on(event, listener) {\n\t\t\tif (\n\t\t\t\tlisteners[event] &&\n\t\t\t\t!listeners[event].includes(listener) &&\n\t\t\t\tisFunction(listener)\n\t\t\t) {\n\t\t\t\tlisteners[event].push(listener);\n\t\t\t}\n\t\t},\n\n\t\t_off(event, listener) {\n\t\t\tif (!isset(event)) {\n\t\t\t\t// Remove all listeners.\n\t\t\t\tObjectForEach(listeners, (event) => {\n\t\t\t\t\tlisteners[event] = [];\n\t\t\t\t});\n\t\t\t} else if (listeners[event]) {\n\t\t\t\tif (isset(listener)) {\n\t\t\t\t\tlisteners[event] = listeners[event].filter(\n\t\t\t\t\t\t(fn) => fn !== listener,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Remove all listeners of the given event.\n\t\t\t\t\tlisteners[event] = [];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t};\n};\n"],"names":["alwanDefaults","id","classname","theme","parent","toggle","popover","position","margin","preset","color","default","target","disabled","format","singleInput","inputs","opacity","preview","copy","swatches","toggleSwatches","closeOnScroll","i18n","palette","buttons","changeFormat","swatch","sliders","hue","alpha","clipboardSVG","int","parseInt","min","max","abs","round","PI","Math","clamp","value","end","start","normalizeAngle","angle","ROOT","document","DOC_ELEMENT","documentElement","BUTTON","OPEN","CLOSE","COLOR","CLICK","POINTER_DOWN","SCROLL","KEY_DOWN","INPUT","CHANGE","BLUR","RGB_FORMAT","HSL_FORMAT","COLOR_FORMATS","ARIA_LABEL","ARROW_KEYS","ArrowUp","ArrowDown","ArrowRight","ArrowLeft","ANGLE_COEFFICIENT_MAP","deg","turn","rad","grad","HSL_REGEX","stringify","a","str","r","g","b","h","s","l","ALWAN_CLASSNAME","CONTAINER_CLASSNAME","PALETTE_CLASSNAME","MARKER_CLASSNAME","PREVIEW_CLASSNAME","BUTTON_CLASSNAME","COPY_BUTTON_CLASSNAME","SLIDER_CLASSNAME","HUE_SLIDER_CLASSNAME","ALPHA_SLIDER_CLASSNAME","INPUT_CLASSNAME","INPUTS_CLASSNAME","SWATCH_CLASSNAME","SWATCHES_CLASSNAME","REFERENCE_CLASSNAME","BACKDROP_CLASSNAME","COLLAPSE_BUTTON_CLASSNAME","OPEN_CLASSNAME","COLLAPSE_CLASSNAME","addEvent","type","listener","options","addEventListener","removeEvent","removeEventListener","isString","isset","isElement","Element","isNumber","Number","isFinite","trim","keys","assign","merge","setPrototypeOf","prototype","Object","from","toArray","isArray","Array","isPlainObject","obj","ObjectForEach","object","callbackFn","forEach","key","deepMerge","source","getBody","body","getElements","reference","context","querySelectorAll","getInteractiveElements","appendChildren","element","children","append","filter","child","setInnerHTML","html","innerHTML","setAttribute","el","name","joinClassnames","classnames","join","createElement","tagName","className","content","attributes","createDivElement","removeElement","remove","replaceElement","replacement","replaceWith","createButton","label","title","createSlider","step","setCustomProperty","property","style","setProperty","toggleClassName","token","forced","classList","translate","x","y","transform","getParentElement","parentElement","getBoundingRectArray","addClientArea","width","height","right","bottom","getBoundingClientRect","clientTop","clientLeft","clientWidth","clientHeight","getShadowRoot","node","ShadowRoot","parentNode","ctx","getContext","parseColor","asString","parsedColor","find","split","every","isHSL","percentage","exec","test","fillStyle","slice","map","Swatches","alwan","container","swatchesContainer","collapseButton","isCollapsed","_init","length","_app","_reposition","_color","_setColor","getPropertyValue","Utility","previewElement","copyButton","isCopied","setButtonIcon","state","fallback","input","select","execCommand","focus","copyColor","clipboard","navigator","_getColorString","writeText","then","catch","blur","fallbackSides","top","left","fallbackAlignments","center","getOverflowAncestors","ancestors","display","overflow","getComputedStyle","includes","push","getOffsetParent","isWebkit","CSS","supports","perspective","containerType","backdropFilter","willChange","contain","isContainingBlock","isTopLayer","topLayerSelectors","some","selector","matches","e","createPopover","popoverElement","alwanReferenceElement","_isOpen","_toggle","side","alignment","sidesFlipOrder","alignmentsFlipOrder","overflowAncestors","popoverStyleDeclaration","shadowRoot","setPosition","viewportRect","targetRect","popoverRect","offsetParentRect","coordinates","axis","viewportSide","targetSide","spaceForPopover","endCoordinateIndex","dimensionIndex","popoverDimension","targetStart","targetEnd","viewportEnd","offset","GAP","autoUpdatePosition","isInViewport","ancestor","ancestorX","ancestorY","ancestorRight","ancestorBottom","handleKeyboard","shiftKey","focusableElements","firstFocusableElement","hasTabbedToPopover","hasTabbedAwayFromPopover","pop","elementToFocusOn","preventDefault","handleBackdropClick","host","contains","labels","togglePopoverEvents","fn","window","_destroy","createApp","ref","config","colorState","root","Reference","refElement","userRef","handleClick","Palette","markerX","markerY","paletteRect","isDisabled","marker","moveMarkerAndUpdateColor","stepX","stepY","v","clientX","clientY","_update","dragMove","setDragging","dragEnd","_change","windowBlur","dragging","_cache","once","steps","_updateMarker","Sliders","_events","alphaSlider","hueSlider","_value","_emit","_setValues","inputsWrapper","switchButton","currentFormatIndex","inputsMap","isSingle","formats","isChanged","handleChange","buildInputs","fields","colorValue","field","_setFormat","formatsLength","indexOf","Inputs","components","component","isOpen","popoverInstance","_setUIElements","_setup","self","this","targetElement","_setRef","dataset","after","decimalToHex","decimal","toString","k","rgb","hsl","hex","emitEvent","referenceElement","rootElement","paletteComponent","slidersComponent","inputsComponent","currentFormat","cashedColor","triggerColorEvent","ignoreRGB","updatePaletteAndSliders","previousHex","HSLToRGB","RGBToHEX","triggerChangeEvent","colorObject","colorFormat","isRGB","RGBToHSL","cMax","cMin","d","version","setDefaults","defaults","constructor","listeners","_on","event","_off","Emitter","setOptions","setColor","getColor","open","close","on","off","addSwatches","concat","removeSwatches","index","item","enable","disable","reset","reposition","trigger","destroy"],"mappings":"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"}